#include <stdlib.h>
#include <stdio.h>

#include "basic_def.h"
#include "MemMgr.h"

void MemMgr_InitZero(MemMgr *hMemMgr)
{
    hMemMgr->line_memory = NULL;
    hMemMgr->line_size = 0;
    hMemMgr->line_used = 0;

	hMemMgr->scratch_memory = NULL;
	hMemMgr->scratch_size = 0;
	hMemMgr->interal_alloc = 0;
}

void MemMgr_Free(MemMgr* hMemMgr)
{
	/* TODO: recycle mechanism*/
}

uint32_t MemMgr_Release(MemMgr* hMemMgr)
{
	hMemMgr->line_memory = NULL;
	hMemMgr->line_size = 0;
	hMemMgr->line_used = 0;
	hMemMgr->scratch_memory = NULL;
	hMemMgr->scratch_size = 0;

	if (hMemMgr->interal_alloc)
	{
		free(hMemMgr->line_memory);
		free(hMemMgr->scratch_memory);
	}

	return STATUS_SUCCESS;
}

int32_t MemMgr_AllocMem(MemMgr* hMemMgr)
{
	hMemMgr->line_memory = malloc(hMemMgr->line_size);
	if (NULL == hMemMgr->line_memory)
		return STATUS_FAIL;

	hMemMgr->scratch_memory = malloc(hMemMgr->scratch_size);
	if (NULL == hMemMgr->scratch_memory)
		return STATUS_FAIL;

	hMemMgr->interal_alloc = 1;

	return STATUS_SUCCESS;
}

int32_t MemMgr_AssignMem(MemMgr* hMemMgr, void* pMemBlock, uint32_t blockSize)
{
	if (blockSize < (hMemMgr->line_size + hMemMgr->scratch_size))
		return STATUS_FAIL;

	hMemMgr->line_memory = pMemBlock;
	hMemMgr->scratch_memory = (char*)pMemBlock + hMemMgr->line_size;
	hMemMgr->interal_alloc = 0;

	return STATUS_SUCCESS;
}

void* MemMgr_alloc_line_8(MemMgr *hMemMgr, uint32_t length)
{
    uint32_t bytes_req;
    void *p = NULL;

	bytes_req = (length * 1 + MEM_ALIGN - 1) & (~(MEM_ALIGN - 1));

    if (hMemMgr->line_used+bytes_req <= hMemMgr->line_size)
    {
        p = (char *)hMemMgr->line_memory + hMemMgr->line_used;
        hMemMgr->line_used += bytes_req;
    }

    return p;
}

void* MemMgr_alloc_line_16(MemMgr *hMemMgr, uint32_t length)
{
    uint32_t bytes_req;
    void *p = NULL;

	bytes_req = (length * 2 + MEM_ALIGN - 1) & (~(MEM_ALIGN - 1));

    if (hMemMgr->line_used+bytes_req <= hMemMgr->line_size)
    {
        p = ((char *)hMemMgr->line_memory + hMemMgr->line_used);
        hMemMgr->line_used += bytes_req;
    }

    return p;
}

void* MemMgr_alloc_line_32(MemMgr* hMemMgr, uint32_t length)
{
	uint32_t bytes_req;
	void* p = NULL;

	bytes_req = (length * 4 + MEM_ALIGN - 1) & (~(MEM_ALIGN - 1));

	if (hMemMgr->line_used + bytes_req <= hMemMgr->line_size)
	{
		p = ((char *)hMemMgr->line_memory + hMemMgr->line_used);
		hMemMgr->line_used += bytes_req;
	}

	return p;
}

uint32_t MemMgr_SzCnt_8(uint32_t length)
{
	return (length + MEM_ALIGN - 1) & (~(MEM_ALIGN - 1));
}

uint32_t MemMgr_SzCnt_16(uint32_t length)
{
	return (length * 2 + MEM_ALIGN - 1) & (~(MEM_ALIGN - 1));
}

uint32_t MemMgr_SzCnt_32(uint32_t length)
{
	return (length * 4 + MEM_ALIGN - 1) & (~(MEM_ALIGN - 1));
}

#ifdef AUDIO_ALGO_DEBUG
void MemMgr_ShowSize(MemMgr *hMemMgr)
{
	uint32_t line_size = hMemMgr->line_size;
	uint32_t scratch_size = hMemMgr->scratch_size;

	uint32_t total_size = line_size + scratch_size;
	printf("line size: %d\nscratch size: %d\ntotal size: %d\n",
		line_size, scratch_size, total_size);
}
#endif
